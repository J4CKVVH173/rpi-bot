import logging
import datetime
import psutil
import subprocess
import os
import re
import sqlite3
from uuid import uuid4
from telegram import Update
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler
from telegram.ext.filters import TEXT, ATTACHMENT

from constant import CONTENT_DB_NAME, STORAGE

DIR_PATH = os.path.dirname(__file__)
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

with open(os.path.join(DIR_PATH, 'token.txt'), 'r') as token:
    TOKEN = token.read().strip()


def is_jellifyn_running() -> bool:
    """Check if the Jellyfin service is running."""
    try:
        subprocess.run(['systemctl', 'is-active', '--quiet', 'jellyfin'], check=True)
        return True
    except subprocess.CalledProcessError:
        return False


async def check_jellyfin_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Check the current status of the Jellyfin service."""
    if is_jellifyn_running():
        message = "üü¢ <b>Jellyfin –∑–∞–ø—É—â–µ–Ω</b>"
    else:
        message = "üî¥ <b>Jellyfin –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>"
    await context.bot.send_message(chat_id=update.effective_chat.id, text=message, parse_mode="HTML")


async def get_jellyfin_logs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Retrieve the last 10 lines of the Jellyfin service logs."""
    logs = subprocess.check_output(['journalctl', '-u', 'jellyfin', '--lines', '10'], stderr=subprocess.STDOUT)
    message = f"<b>–õ–æ–≥–∏ Jellyfin:</b>\n<pre>{logs.decode('utf-8')}</pre>"
    try:
        await context.bot.send_message(chat_id=update.effective_chat.id, text=message, parse_mode='HTML')
    except Exception as e:
        await context.bot.send_message(
            chat_id=update.effective_chat.id, text=f"ÔøΩÔøΩ –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ Jellyfin: {e}"
        )


async def get_jellyfin_errors(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Retrieve the last 10 error entries from the Jellyfin logs."""
    logs = subprocess.check_output(
        ['journalctl', '-u', 'jellyfin', '--lines', '10', '--grep', 'error'], stderr=subprocess.STDOUT
    )
    message = f"<b>–û—à–∏–±–∫–∏ Jellyfin:</b>\n<pre>{logs.decode('utf-8')}</pre>"
    await context.bot.send_message(chat_id=update.effective_chat.id, text=message, parse_mode='HTML')


async def restart_jellyfin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Restart the Jellyfin service."""
    try:
        subprocess.run(['sudo', 'systemctl', 'restart', 'jellyfin'], check=True)
        await context.bot.send_message(
            chat_id=update.effective_chat.id, text="üîÑ <b>Jellyfin –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω</b>", parse_mode='HTML'
        )
    except subprocess.CalledProcessError as e:
        await context.bot.send_message(
            chat_id=update.effective_chat.id, text=f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ Jellyfin: {e}", parse_mode='HTML'
        )


async def top_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Retrieve the top 20 CPU-consuming processes."""
    top_output = (
        subprocess.check_output(['top', '-n', '1', '-o', '-%CPU', '-b'], stderr=subprocess.STDOUT)
        .decode('utf-8')
        .split('\n')
    )
    message = f"<b>–¢–æ–ø 20 –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é CPU:</b>\n<pre>{'\n'.join(top_output[-20:])}</pre>"
    await context.bot.send_message(chat_id=update.effective_chat.id, text=message, parse_mode='HTML')


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Send a greeting message when the bot starts."""
    await context.bot.send_message(
        chat_id=update.effective_chat.id, text="–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã.", parse_mode="HTML"
    )


async def get_system_status():
    """Retrieve system status, including CPU temperature, voltage, CPU and RAM usage, and disk usage."""
    temp_output = subprocess.check_output(["vcgencmd", "measure_temp"]).decode("utf-8")
    voltage_output = subprocess.check_output(["vcgencmd", "measure_volts"]).decode("utf-8")
    temperature = temp_output.split('=')[1].strip()
    voltage = voltage_output.split('=')[1].strip()

    cpu_usage = psutil.cpu_percent(interval=1)
    memory = psutil.virtual_memory()
    ram_usage = memory.percent

    allowed_mount_points = {"/", "/boot/firmware", "/mnt/SSD4TB/D"}
    allowed_devices = re.compile(r"mmcblk0p[12]|sd[a-z]+\d+")

    disk_info = []
    partitions = psutil.disk_partitions()
    for partition in partitions:
        try:
            if partition.mountpoint in allowed_mount_points or allowed_devices.match(partition.device.split("/")[-1]):
                usage = psutil.disk_usage(partition.mountpoint)
                total_size = usage.total / (1024**3)
                disk_info.append(
                    f"  üîπ <b>–î–∏—Å–∫ {partition.device}</b> ({partition.mountpoint}):"
                    f"\n  üìä <b>{usage.percent}%</b> –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ"
                    f"\n  üíæ <b>{usage.free / (1024 ** 3):.2f} GB</b> —Å–≤–æ–±–æ–¥–Ω–æ –∏–∑ <b>{total_size:.2f} GB</b>\n"
                )
        except PermissionError:
            continue

    status = (
        f"üñ•Ô∏è <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:</b>\n\n"
        f"üå°Ô∏è <b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞:</b> {temperature}\n"
        f"‚ö°Ô∏è <b>–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ:</b> {voltage}\n"
        f"‚öôÔ∏è <b>–ó–∞–≥—Ä—É–∑–∫–∞ CPU:</b> {cpu_usage}%\n"
        f"üß† <b>–ó–∞–≥—Ä—É–∑–∫–∞ RAM:</b> {ram_usage}%\n\n"
        f"üíæ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Å–∫–∞—Ö:</b>\n\n"
    )

    if disk_info:
        status += "\n".join(disk_info)
    else:
        status += "üî¥ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –¥–∏—Å–∫–∞—Ö"

    return status


async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Send system status to the user."""
    text = await get_system_status()
    await context.bot.send_message(chat_id=update.effective_chat.id, parse_mode="HTML", text=text)


async def help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Provide a list of available commands."""
    help_text = (
        "üìö <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
        "üîπ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "üîπ /help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\n"
        "üîπ /status - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã (—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –∑–∞–≥—Ä—É–∑–∫–∞ –¶–ü –∏ –û–ó–£)\n"
        "üîπ /check_ssd_2tb - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç - –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ SSD –¥–ª—è —á—Ç–µ–Ω–∏—è\n"
        "üîπ /remount_ssd_2tb - –ó–∞–Ω–æ–≤–æ –ø–µ—Ä–µ–º–æ–Ω—Ç–∏—Ä—É–µ—Ç SSD\n"
        "üîπ /check_jellyfin_status - –°—Ç–∞—Ç—É—Å jellyfin\n"
        "üîπ /get_jellyfin_logs - –õ–æ–≥ jellyfin\n"
        "üîπ /restart_jellyfin - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ jellyfin\n"
        "üîπ /get_jellyfin_errors - –õ–æ–≥ –æ—à–∏–±–æ–∫ jellyfin\n"
        "üîπ /top_statistics - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ 20 —Å–∞–º—ã—Ö –Ω–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤\n"
    )
    await context.bot.send_message(chat_id=update.effective_chat.id, text=help_text, parse_mode="HTML")


async def status_ssd_2tb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Check if the 2TB SSD is available for reading."""
    directory = "/mnt/SSD_4TB/D"
    try:
        os.listdir(directory)
        message = "üü¢ <b>–î–∏—Å–∫ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —á—Ç–µ–Ω–∏—è</b>"
    except OSError as e:
        message = f"üî¥ <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∏—Å–∫–∞:</b> {str(e)}"
    finally:
        await context.bot.send_message(chat_id=update.effective_chat.id, text=message, parse_mode='HTML')


async def remount_ssd_2tb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Remount the 2TB SSD."""
    try:
        result = subprocess.run(
            ['/bin/bash', '/home/andrey/scripts/check_mount.sh'], capture_output=True, text=True, check=True
        )
        message = f"üü¢ <b>{result.stdout.strip()}</b>"
    except subprocess.CalledProcessError as e:
        message = f'üî¥ <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ SSD:</b> {str(e)}'
    finally:
        await context.bot.send_message(chat_id=update.effective_chat.id, text=message, parse_mode='HTML')


async def save(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ."""

    def save_to_file(name, content, db):
        file_name = str(uuid4())
        with open(os.path.join(STORAGE, file_name), 'w') as f:
            f.write(content)

        creation = str(datetime.datetime.now())

        cursor = db.cursor()

        cursor.execute(
            'INSERT INTO Content (name, unique_name, creation, is_file) VALUES (?, ?, ?, ?)',
            (name, file_name, creation, False),
        )
        db.commit()

    if update.message.document:
        file = await update.message.document.get_file()
        unique_name = str(uuid4())
        file_name = update.message.text if update.message.text else update.message.document.file_name
        await file.download_to_drive(
            custom_path=os.path.join(STORAGE, unique_name),
        )
        with sqlite3.connect(CONTENT_DB_NAME) as db:
            cursor = db.cursor()

            cursor.execute(
                'INSERT INTO Content (name, unique_name, creation, is_file) VALUES (?, ?, ?, ?)',
                (file_name, unique_name, str(datetime.datetime.now()), True),
            )
            db.commit()
    else:
        incoming_request = update.message.text.split(' ', 1)

        if not os.path.exists(STORAGE):
            os.makedirs(STORAGE)

        with sqlite3.connect(CONTENT_DB_NAME) as db:
            try:
                save_to_file(incoming_request[0], incoming_request[1], db)
            except IndexError:
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text='üî¥ –ù–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ\n –ù—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –≤ –≤–∏–¥–µ: <–ò–º—è —Ñ–∞–π–ª–∞> <–ö–æ–Ω—Ç–µ–Ω—Ç>',
                )
                return

    await context.bot.send_message(chat_id=update.effective_chat.id, text='üü¢ –§–∞–π–ª –∑–∞–ø–∏—Å–∞–Ω –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ')


async def all_files(update: Update, context: ContextTypes.DEFAULT_TYPE):
    with sqlite3.connect(CONTENT_DB_NAME) as db:
        cursor = db.cursor()
        cursor.execute('SELECT id, name, creation FROM Content')
        files = cursor.fetchall()
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        message = "ID - Name - Creation Date\n"

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã —Å –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ–º
        for file_id, name, creation in files:
            creation_date = datetime.datetime.strptime(creation, '%Y-%m-%d %H:%M:%S.%f')
            formatted_creation = creation_date.strftime('%Y-%m-%d %H:%M')
            message += f"{file_id} - {name} - {str(formatted_creation)}\n"

        await context.bot.send_message(chat_id=update.effective_chat.id, text=message, parse_mode='HTML')


async def get_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db_id = update.message.text.split(' ')[1]
    with sqlite3.connect(CONTENT_DB_NAME) as db:
        cursor = db.cursor()
        cursor.execute(f'SELECT name, unique_name, is_file FROM Content WHERE id = {db_id}')
        name, unique_name, is_file = cursor.fetchall()[0]
        if not is_file:
            with open(os.path.join(STORAGE, unique_name), 'r') as f:
                await context.bot.send_message(chat_id=update.effective_chat.id, text=f.read())
        else:
            with open(os.path.join(STORAGE, unique_name), 'rb') as f:
                await context.bot.send_document(update.effective_chat.id, f, filename=name)


async def clear_storage(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ—Ç–æ–¥ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ—Ç —Ö—Ä–∞–Ω–∏–ª–∏—â–µ."""
    with sqlite3.connect(CONTENT_DB_NAME) as db:
        cursor = db.cursor()
        cursor.execute('SELECT unique_name FROM Content')
        files = cursor.fetchall()
        cursor.execute('DELETE FROM Content')
        db.commit()

        try:
            for file_name in files:
                os.remove(os.path.join(STORAGE, file_name))
        except Exception:
            pass

    await context.bot.send_message(chat_id=update.effective_chat.id, text='üü¢ –•—Ä–∞–Ω–∏–ª–∏—â–µ –æ—á–∏—â–µ–Ω–æ')


async def delete_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ—Ç–æ–¥ —É–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª –ø–æ id."""
    file_id = update.message.text.split(' ')[1]
    with sqlite3.connect(CONTENT_DB_NAME) as db:
        cursor = db.cursor()
        cursor.execute(f'SELECT unique_name FROM Content WHERE id = {file_id}')
        file_name = cursor.fetchall()[0][0]
        cursor.execute(f'DELETE FROM Content WHERE id = {file_id}')
        db.commit()

        try:
            os.remove(os.path.join(STORAGE, file_name))
        except Exception:
            pass

    await context.bot.send_message(chat_id=update.effective_chat.id, text='üü¢ –§–∞–π–ª —É–¥–∞–ª–µ–Ω')


if __name__ == '__main__':
    application = ApplicationBuilder().token(TOKEN).build()

    start_handler = CommandHandler('start', start)
    status_handler = CommandHandler('status', status)
    help_handler = CommandHandler('help', help)
    check_ssd_handler = CommandHandler('check_ssd_2tb', status_ssd_2tb)
    remount_ssd_handler = CommandHandler('remount_ssd_2tb', remount_ssd_2tb)
    check_jellyfin_status_handler = CommandHandler('check_jellyfin_status', check_jellyfin_status)
    get_jellyfin_logs_handler = CommandHandler('get_jellyfin_logs', get_jellyfin_logs)
    restart_jellyfin_handler = CommandHandler('restart_jellyfin', restart_jellyfin)
    get_jellyfin_errors_handler = CommandHandler('get_jellyfin_errors', get_jellyfin_errors)
    top_statistics_handler = CommandHandler('top_statistics', top_statistics)
    files_handler = CommandHandler('files', all_files)
    clear_handler = CommandHandler('clear', clear_storage)
    get_file_handler = CommandHandler('file', get_file, has_args=True)
    delete_file_handler = CommandHandler('delete_file', delete_file, has_args=True)

    save_handler = MessageHandler(TEXT, save)
    attach_handler = MessageHandler(ATTACHMENT, save)

    application.add_handler(start_handler)
    application.add_handler(status_handler)
    application.add_handler(help_handler)
    application.add_handler(check_ssd_handler)
    application.add_handler(remount_ssd_handler)
    application.add_handler(check_jellyfin_status_handler)
    application.add_handler(get_jellyfin_logs_handler)
    application.add_handler(restart_jellyfin_handler)
    application.add_handler(get_jellyfin_errors_handler)
    application.add_handler(top_statistics_handler)
    application.add_handler(get_file_handler)
    application.add_handler(files_handler)
    application.add_handler(clear_handler)
    application.add_handler(delete_file_handler)

    application.add_handler(save_handler)
    application.add_handler(attach_handler)

    application.run_polling()
