import logging
import psutil
import subprocess
import os
import re
from telegram import Update
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler

DIR_PATH = os.path.dirname(__file__)
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

with open(os.path.join(DIR_PATH, 'token.txt'), 'r') as token:
    TOKEN = token.read().strip()


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(chat_id=update.effective_chat.id, text="I'm a bot, please talk to me!")


async def get_system_status():
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    temp_output = subprocess.check_output(["vcgencmd", "measure_temp"]).decode("utf-8")
    temperature = temp_output.split('=')[1].strip()

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ CPU –∏ RAM
    cpu_usage = psutil.cpu_percent(interval=1)
    memory = psutil.virtual_memory()
    ram_usage = memory.percent

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∏—Å–∫–æ–≤
    allowed_mount_points = {"/", "/boot/firmware", "/mnt/SSD4TB/D"}
    allowed_devices = re.compile(r"mmcblk0p[12]|sd[a-z]+\d+")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏—Å–∫–∞—Ö —á–µ—Ä–µ–∑ psutil
    disk_info = []
    partitions = psutil.disk_partitions()
    for partition in partitions:
        try:
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–æ—á–∫–∞–º –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º
            if partition.mountpoint in allowed_mount_points or allowed_devices.match(partition.device.split("/")[-1]):
                usage = psutil.disk_usage(partition.mountpoint)
                # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º Markdown
                disk_info.append(
                    f"üîπ *–î–∏—Å–∫ {partition.device.replace('.', '\.')}* ({partition.mountpoint.replace('.', '\.')})\n"
                    f"   üìä *{usage.percent}%* –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ\n"
                    f"   üíæ *{usage.free / (1024 ** 3):.2f} GB* —Å–≤–æ–±–æ–¥–Ω–æ"
                )
        except PermissionError:
            # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ä–∞–∑–¥–µ–ª—ã, –∫ –∫–æ—Ç–æ—Ä—ã–º –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞
            continue

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    status = (
        f"üñ•Ô∏è *–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:* \n\n"
        f"üå°Ô∏è *–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞:* {temperature.replace('.', '\.')}\n"
        f"‚öôÔ∏è *–ó–∞–≥—Ä—É–∑–∫–∞ CPU:* {cpu_usage}%\n"
        f"üß† *–ó–∞–≥—Ä—É–∑–∫–∞ RAM:* {ram_usage}%\n\n"
        f"üíæ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Å–∫–∞—Ö:* \n"
    )

    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ –¥–∏—Å–∫–∞—Ö –µ—Å—Ç—å, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ —Å—Ç–∞—Ç—É—Å
    if disk_info:
        status += "\n".join(disk_info)
    else:
        status += "üî¥ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –¥–∏—Å–∫–∞—Ö"

    return status


async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = await get_system_status()
    await context.bot.send_message(chat_id=update.effective_chat.id, parse_mode="MarkdownV2", text=text)


async def help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\n"
        "/status - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã (—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –∑–∞–≥—Ä—É–∑–∫–∞ –¶–ü –∏ –û–ó–£)\n"
        "/check_ssd_2tb - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç - –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ SSD –¥–ª—è —á—Ç–µ–Ω–∏—è\n"
        "/remount_ssd_2tb - –ó–∞–Ω–æ–≤–æ –ø–µ—Ä–µ–º–æ–Ω—Ç–∏—Ä—É–µ—Ç SSD\n"
    )
    await context.bot.send_message(chat_id=update.effective_chat.id, text=help_text)


async def status_ssd_2tb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å SSD –Ω–∞ 2 –ì–ë."""
    directory = "/mnt/SSD_4TB/D"
    try:
        # –µ—Å–ª–∏ –¥–∏—Å–∫ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–ª—Å—è, —Ç–æ –≤—ã–ø–∞–¥–µ—Ç –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è
        os.listdir(directory)
        message = "–î–∏—Å–∫ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —á—Ç–µ–Ω–∏—è"
    except OSError as e:
        message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∏—Å–∫–∞: {str(e)}"
    finally:
        await context.bot.send_message(chat_id=update.effective_chat.id, text=message)


async def remount_ssd_2tb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        result = subprocess.run(
            ['/bin/bash', '/home/andrey/scripts/check_mount.sh'], capture_output=True, text=True, check=True
        )
        message = result.stdout.strip()
    except subprocess.CalledProcessError as e:
        message = f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ SSD: {str(e)}'
    finally:
        await context.bot.send_message(chat_id=update.effective_chat.id, text=message)


if __name__ == '__main__':
    application = ApplicationBuilder().token(TOKEN).build()

    start_handler = CommandHandler('start', start)
    status_handler = CommandHandler('status', status)
    help_handler = CommandHandler('help', help)
    check_ssd_handler = CommandHandler('check_ssd_2tb', status_ssd_2tb)
    remount_ssd_handler = CommandHandler('remount_ssd_2tb', remount_ssd_2tb)

    application.add_handler(start_handler)
    application.add_handler(status_handler)
    application.add_handler(help_handler)
    application.add_handler(check_ssd_handler)
    application.add_handler(remount_ssd_handler)

    application.run_polling()
